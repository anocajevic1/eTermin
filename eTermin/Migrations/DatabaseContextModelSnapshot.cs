// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eTermin.Models;

namespace eTermin.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eTermin.Models.Administrator", b =>
                {
                    b.Property<int>("AdministratorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessLevel");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("AdministratorID");

                    b.ToTable("Administrator");
                });

            modelBuilder.Entity("eTermin.Models.Hall", b =>
                {
                    b.Property<int>("HallID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Duration");

                    b.Property<DateTime>("EndTime");

                    b.Property<int>("Price");

                    b.Property<int>("Sport");

                    b.Property<int>("SportCentreID");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("HallID");

                    b.HasIndex("SportCentreID");

                    b.ToTable("Hall");
                });

            modelBuilder.Entity("eTermin.Models.Log", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Note");

                    b.Property<int>("PersonID");

                    b.HasKey("LogID");

                    b.HasIndex("PersonID");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("eTermin.Models.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("PersonID");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("eTermin.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime");

                    b.Property<DateTime>("DateTimeCreated");

                    b.Property<int>("HallID");

                    b.Property<int>("PersonID");

                    b.HasKey("ReservationID");

                    b.HasIndex("HallID");

                    b.HasIndex("PersonID");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("eTermin.Models.SportCentre", b =>
                {
                    b.Property<int>("SportCentreID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Photo");

                    b.HasKey("SportCentreID");

                    b.ToTable("SportCentre");
                });

            modelBuilder.Entity("eTermin.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DayOfWeek");

                    b.Property<int>("HallID");

                    b.Property<string>("Note");

                    b.Property<DateTime>("Time");

                    b.Property<int>("UserID");

                    b.HasKey("SubscriptionID");

                    b.HasIndex("HallID");

                    b.HasIndex("UserID");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("eTermin.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("EmployeeID");

                    b.Property<string>("Note");

                    b.Property<int>("SportCentreID");

                    b.Property<DateTime>("Time");

                    b.Property<int>("UserID");

                    b.HasKey("TransactionID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("SportCentreID");

                    b.HasIndex("UserID");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("eTermin.Models.Employee", b =>
                {
                    b.HasBaseType("eTermin.Models.Person");

                    b.Property<int>("SportCentreID");

                    b.HasIndex("SportCentreID");

                    b.ToTable("Employee");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("eTermin.Models.User", b =>
                {
                    b.HasBaseType("eTermin.Models.Person");

                    b.Property<double>("Balance");

                    b.Property<string>("Photo");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("eTermin.Models.Hall", b =>
                {
                    b.HasOne("eTermin.Models.SportCentre", "SportCentre")
                        .WithMany()
                        .HasForeignKey("SportCentreID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eTermin.Models.Log", b =>
                {
                    b.HasOne("eTermin.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eTermin.Models.Reservation", b =>
                {
                    b.HasOne("eTermin.Models.Hall", "Hall")
                        .WithMany()
                        .HasForeignKey("HallID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eTermin.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eTermin.Models.Subscription", b =>
                {
                    b.HasOne("eTermin.Models.Hall", "Hall")
                        .WithMany()
                        .HasForeignKey("HallID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eTermin.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eTermin.Models.Transaction", b =>
                {
                    b.HasOne("eTermin.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eTermin.Models.SportCentre", "SportCentre")
                        .WithMany()
                        .HasForeignKey("SportCentreID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eTermin.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eTermin.Models.Employee", b =>
                {
                    b.HasOne("eTermin.Models.SportCentre", "SportCentre")
                        .WithMany()
                        .HasForeignKey("SportCentreID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
